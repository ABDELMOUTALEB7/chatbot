{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMVOpUAeUVcsJHoYVDFuG05",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ABDELMOUTALEB7/chatbot/blob/main/BLOCKCHAIN%20CASE%20STUDY%205\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "98nsxuL04g3R"
      },
      "outputs": [],
      "source": [
        "# --- Imports\n",
        "import os, io, json, hashlib\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from datetime import datetime"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    from google.colab import files\n",
        "    COLAB = True\n",
        "except Exception:\n",
        "    COLAB = False"
      ],
      "metadata": {
        "id": "8iJbfJzw4hii"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def sha256_hex(obj) -> str:\n",
        "    \"\"\"Canonical SHA256 over JSON with sorted keys (immutability).\"\"\"\n",
        "    return hashlib.sha256(json.dumps(obj, sort_keys=True).encode()).hexdigest()"
      ],
      "metadata": {
        "id": "RDfxYgHy4kW7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def hash_block(row) -> str:\n",
        "    \"\"\"Compute content hash on core fields only (sender, receiver, product, amount:int, currency)\n",
        "       + prev + ts:int — consistent with the professor's recipe.\"\"\"\n",
        "    payload_core = {\n",
        "        \"sender\":   str(row[\"sender\"]),\n",
        "        \"receiver\": str(row[\"receiver\"]),\n",
        "        \"product\":  str(row[\"product\"]),\n",
        "        \"amount\":   int(row[\"amount\"]),\n",
        "        \"currency\": str(row[\"currency\"]),\n",
        "    }\n",
        "    prev_val = \"\" if ((\"prev\" not in row) or pd.isna(row[\"prev\"])) else str(row[\"prev\"])\n",
        "    payload = {\"data\": payload_core, \"prev\": prev_val, \"ts\": int(row[\"ts\"])}\n",
        "    return sha256_hex(payload)"
      ],
      "metadata": {
        "id": "r_M7UFjC4z4y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def validate_chain(df_in: pd.DataFrame):\n",
        "    \"\"\"Return list of (block_id, ISSUE) where ISSUE ∈ {HASH_MISMATCH, BROKEN_LINK}.\"\"\"\n",
        "    dfc = df_in.sort_values(\"block_id\").reset_index(drop=True).copy()\n",
        "    issues = []\n",
        "    for i in range(len(dfc)):\n",
        "        # Hash correctness (immutability)\n",
        "        if hash_block(dfc.loc[i]) != str(dfc.loc[i, \"hash\"]):\n",
        "            issues.append((int(dfc.loc[i, \"block_id\"]), \"HASH_MISMATCH\"))\n",
        "        # Link continuity (order fidelity)\n",
        "        if i > 0 and str(dfc.loc[i, \"prev\"]) != str(dfc.loc[i-1, \"hash\"]):\n",
        "            issues.append((int(dfc.loc[i, \"block_id\"]), \"BROKEN_LINK\"))\n",
        "    return issues"
      ],
      "metadata": {
        "id": "H2ETsfwO42Q6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def last_valid_index(df_in: pd.DataFrame):\n",
        "    \"\"\"Index of last valid row (valid-prefix principle).\"\"\"\n",
        "    dfc = df_in.sort_values(\"block_id\").reset_index(drop=True).copy()\n",
        "    for i in range(len(dfc)):\n",
        "        bad_hash = hash_block(dfc.loc[i]) != str(dfc.loc[i, \"hash\"])\n",
        "        bad_link = i > 0 and str(dfc.loc[i, \"prev\"]) != str(dfc.loc[i-1, \"hash\"])\n",
        "        if bad_hash or bad_link:\n",
        "            return i - 1\n",
        "    return len(dfc) - 1"
      ],
      "metadata": {
        "id": "RrUbq-nX45Gl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def valid_prefix(df_in: pd.DataFrame):\n",
        "    k = last_valid_index(df_in)\n",
        "    return df_in.iloc[:k+1].copy(), k"
      ],
      "metadata": {
        "id": "qBKMsgNw47ji"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Plots (Matplotlib; one chart per figure; no fixed colors)\n",
        "def plot_bar(df, x, y, title, rotate=False):\n",
        "    plt.figure()\n",
        "    plt.bar(df[x].astype(str), df[y].values)\n",
        "    plt.title(title)\n",
        "    plt.xlabel(x); plt.ylabel(y)\n",
        "    if rotate: plt.xticks(rotation=45, ha='right')\n",
        "    plt.tight_layout(); plt.show()"
      ],
      "metadata": {
        "id": "4N0w2VwP4-EP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_line(df, x, y, title):\n",
        "    plt.figure()\n",
        "    plt.plot(df[x], df[y])\n",
        "    plt.title(title)\n",
        "    plt.xlabel(x); plt.ylabel(y)\n",
        "    plt.tight_layout(); plt.show()\n"
      ],
      "metadata": {
        "id": "7mClzhgi5ARB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_chain_validity(df_full, last_valid_idx, title=\"Chain Validity (blocks)\"):\n",
        "    \"\"\"Simple chain view: scatter valid vs invalid blocks by block_id.\"\"\"\n",
        "    dd = df_full[[\"block_id\"]].copy()\n",
        "    dd[\"status\"] = [\"VALID\" if i <= last_valid_idx else \"INVALID\" for i in dd.index]\n",
        "    plt.figure()\n",
        "    valid_mask = dd[\"status\"] == \"VALID\"\n",
        "    invalid_mask = ~valid_mask\n",
        "    plt.scatter(dd.loc[valid_mask, \"block_id\"], [1]*valid_mask.sum(), label=\"VALID\", marker=\"o\")\n",
        "    plt.scatter(dd.loc[invalid_mask, \"block_id\"], [1]*invalid_mask.sum(), label=\"INVALID\", marker=\"x\")\n",
        "    plt.yticks([]); plt.xlabel(\"block_id\"); plt.title(title); plt.legend()\n",
        "    plt.tight_layout(); plt.show()"
      ],
      "metadata": {
        "id": "gX__adzM5Dxy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Distortion FULL vs VALID\n",
        "def distortion_table(full_df, valid_df, key, value=\"amount\"):\n",
        "    a = full_df.groupby(key, as_index=False)[value].sum().rename(columns={value:f\"{value}_ALL\"})\n",
        "    b = valid_df.groupby(key, as_index=False)[value].sum().rename(columns={value:f\"{value}_VALID\"})\n",
        "    m = a.merge(b, on=key, how=\"outer\").fillna(0)\n",
        "    m[\"abs_delta\"] = (m[f\"{value}_ALL\"] - m[f\"{value}_VALID\"]).abs()\n",
        "    m[\"signed_delta\"] = m[f\"{value}_ALL\"] - m[f\"{value}_VALID\"]\n",
        "    return m.sort_values(\"abs_delta\", ascending=False)"
      ],
      "metadata": {
        "id": "RNXFYLJT5F5d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 1) Upload (or auto-generate) the 3 datasets\n",
        "# ----------------------------\n",
        "EXPECTED = [\"business_chain_clean.csv\", \"business_chain_tampered.csv\", \"coldchain_chain_clean.csv\"]\n",
        "uploaded = {}\n",
        "\n",
        "if COLAB:\n",
        "    print(\"Upload your CSVs (business_chain_clean.csv, business_chain_tampered.csv, coldchain_chain_clean.csv)\")\n",
        "    try:\n",
        "        uploaded = files.upload()\n",
        "    except Exception as e:\n",
        "        print(\"Upload skipped/failed; will auto-generate demo data:\", e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 160
        },
        "id": "z3bw3j055H8Q",
        "outputId": "60a87e9d-9e46-47c5-a7f3-56e383bed690"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Upload your CSVs (business_chain_clean.csv, business_chain_tampered.csv, coldchain_chain_clean.csv)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-d8be20d7-d8f7-4d2b-af1f-4bb89d810659\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-d8be20d7-d8f7-4d2b-af1f-4bb89d810659\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving business_chain_clean_large - business_chain_clean_large.csv to business_chain_clean_large - business_chain_clean_large.csv\n",
            "Saving business_chain_tampered_large - business_chain_tampered_large.csv to business_chain_tampered_large - business_chain_tampered_large.csv\n",
            "Saving coldchain_chain_clean_large - coldchain_chain_clean_large.csv to coldchain_chain_clean_large - coldchain_chain_clean_large.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def read_csv_maybe_uploaded(name):\n",
        "    if name in uploaded:\n",
        "        return pd.read_csv(io.BytesIO(uploaded[name]), keep_default_na=False).sort_values(\"block_id\").reset_index(drop=True)\n",
        "    else:\n",
        "        return pd.read_csv(name, keep_default_na=False).sort_values(\"block_id\").reset_index(drop=True)"
      ],
      "metadata": {
        "id": "7Kb0HJ_W5KmZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def make_business_chain_clean(n=40, seed=42, filename=\"business_chain_clean.csv\"):\n",
        "    rng = np.random.default_rng(seed)\n",
        "    senders = [\"Producer_A\",\"Producer_B\",\"Producer_C\"]\n",
        "    receivers = [\"3PL_R1\",\"3PL_R2\",\"Store_S1\",\"Store_S2\",\"Client_X\",\"Client_Y\"]\n",
        "    products = [\"Milk\",\"Yogurt\",\"Cheese\",\"Butter\"]\n",
        "    currency = \"USD\"\n",
        "    rows, prev = [], \"\"\n",
        "    ts0 = int(datetime(2025, 1, 1, 9, 0).timestamp())\n",
        "    for i in range(n):\n",
        "        row = {\n",
        "            \"block_id\": i+1,\n",
        "            \"sender\": rng.choice(senders),\n",
        "            \"receiver\": rng.choice(receivers),\n",
        "            \"product\": rng.choice(products),\n",
        "            \"amount\": int(rng.integers(1, 40)),\n",
        "            \"currency\": currency,\n",
        "            \"ts\": ts0 + int(rng.integers(0, 60*60*24*14)),\n",
        "            \"prev\": prev\n",
        "        }\n",
        "        payload = {\"data\": {\n",
        "            \"sender\": row[\"sender\"], \"receiver\": row[\"receiver\"],\n",
        "            \"product\": row[\"product\"], \"amount\": int(row[\"amount\"]),\n",
        "            \"currency\": row[\"currency\"]},\n",
        "            \"prev\": str(row[\"prev\"]), \"ts\": int(row[\"ts\"])}\n",
        "        h = sha256_hex(payload)\n",
        "        row[\"hash\"] = h\n",
        "        prev = h\n",
        "        rows.append(row)\n",
        "    df = pd.DataFrame(rows).sort_values(\"block_id\").reset_index(drop=True)\n",
        "    df.to_csv(filename, index=False)\n",
        "    return df"
      ],
      "metadata": {
        "id": "8ao2QwLG5VVn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def make_business_chain_tampered(src=\"business_chain_clean.csv\", filename=\"business_chain_tampered.csv\"):\n",
        "    df = pd.read_csv(src, keep_default_na=False)\n",
        "    df_t = df.copy()\n",
        "    mid = len(df_t)//2\n",
        "    df_t.loc[mid, \"amount\"] = int(df_t.loc[mid, \"amount\"]) + 25  # controlled tamper\n",
        "    df_t.to_csv(filename, index=False)\n",
        "    return df_t"
      ],
      "metadata": {
        "id": "f6SBLQZb5YQ1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def make_coldchain_clean(n=30, seed=123, filename=\"coldchain_chain_clean.csv\"):\n",
        "    rng = np.random.default_rng(seed)\n",
        "    roles = [\"Producer\",\"3PL\",\"Store\"]\n",
        "    locations = [\"Hub_A\",\"Hub_B\",\"Truck_12\",\"DC_West\",\"Store_77\"]\n",
        "    lots = [f\"LOT{1000+i}\" for i in range(10)]\n",
        "    products = [\"Milk\",\"Yogurt\",\"Cheese\"]\n",
        "    currency = \"USD\"\n",
        "    rows, prev = [], \"\"\n",
        "    ts0 = int(datetime(2025, 2, 1, 9, 0).timestamp())\n",
        "    for i in range(n):\n",
        "        role = rng.choice(roles)\n",
        "        row = {\n",
        "            \"block_id\": i+1,\n",
        "            \"sender\": f\"{role}_SRC\",\n",
        "            \"receiver\": f\"{role}_DST\",\n",
        "            \"product\": rng.choice(products),\n",
        "            \"amount\": int(rng.integers(1, 25)),\n",
        "            \"currency\": currency,\n",
        "            \"ts\": ts0 + int(rng.integers(0, 60*60*7*24)),\n",
        "            \"prev\": prev,\n",
        "            \"lot_id\": rng.choice(lots),\n",
        "            \"role\": role,\n",
        "            \"location\": rng.choice(locations),\n",
        "            \"temp_c\": float(rng.normal(5.0, 1.2)),\n",
        "            \"sla_min_c\": 2.0,\n",
        "            \"sla_max_c\": 8.0,\n",
        "        }\n",
        "        payload = {\"data\": {\n",
        "            \"sender\": row[\"sender\"], \"receiver\": row[\"receiver\"],\n",
        "            \"product\": row[\"product\"], \"amount\": int(row[\"amount\"]),\n",
        "            \"currency\": row[\"currency\"]},\n",
        "            \"prev\": str(row[\"prev\"]), \"ts\": int(row[\"ts\"])}\n",
        "        h = sha256_hex(payload)\n",
        "        row[\"hash\"] = h\n",
        "        prev = h\n",
        "        rows.append(row)\n",
        "    df = pd.DataFrame(rows).sort_values(\"block_id\").reset_index(drop=True)\n",
        "    df.to_csv(filename, index=False)\n",
        "    return df"
      ],
      "metadata": {
        "id": "Y9TdOcED5aOQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "have_all = all(n in uploaded for n in EXPECTED)\n",
        "if not have_all:\n",
        "    print(\"Generating demo datasets (same schema/logic as the guide)...\")\n",
        "    make_business_chain_clean()\n",
        "    make_business_chain_tampered()\n",
        "    make_coldchain_clean()\n",
        "    if COLAB:\n",
        "        # Optional auto-download of generated files to verify\n",
        "        for nm in EXPECTED:\n",
        "            try:\n",
        "                files.download(nm)\n",
        "            except:\n",
        "                pass"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "QNu5F8ZS5d3R",
        "outputId": "8f7d15fb-becd-4112-be22-54284c5492c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generating demo datasets (same schema/logic as the guide)...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_64fdb54b-eef3-4a2e-a2dc-9140e8505b5e\", \"business_chain_clean.csv\", 7043)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_318f10ce-a987-4576-a3d5-fd4af68f9dbf\", \"business_chain_tampered.csv\", 7044)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_08b3c661-be20-4300-8d12-3aa43b90e7c5\", \"coldchain_chain_clean.csv\", 6728)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2) BUSINESS CLEAN — Integrity + chain view\n",
        "# ----------------------------\n",
        "print(\"\\n===== BUSINESS CLEAN =====\")\n",
        "issues_clean = validate_chain(df_clean)\n",
        "df_clean_valid, idx_clean = valid_prefix(df_clean)\n",
        "print(\"Issues:\", issues_clean if issues_clean else \"none\")\n",
        "print(\"Last valid index:\", idx_clean, \"| kept rows:\", len(df_clean_valid), \"of\", len(df_clean))\n",
        "\n",
        "plot_chain_validity(df_clean, idx_clean, title=\"Business Clean — Chain Validity\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 556
        },
        "id": "2AwrPUtI5f5b",
        "outputId": "92773cab-def0-4771-f82f-409b4e41fd7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== BUSINESS CLEAN =====\n",
            "Issues: none\n",
            "Last valid index: 39 | kept rows: 40 of 40\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ----------------------------\n",
        "print(\"\\n===== BUSINESS TAMPERED =====\")\n",
        "issues_t = validate_chain(df_tamp)\n",
        "df_tamp_valid, idx_tamp = valid_prefix(df_tamp)\n",
        "print(\"Issues:\", issues_t if issues_t else \"none\")\n",
        "print(\"Last valid index:\", idx_tamp, \"| kept rows:\", len(df_tamp_valid), \"of\", len(df_tamp))\n",
        "\n",
        "plot_chain_validity(df_tamp, idx_tamp, title=\"Business Tampered — Chain Validity\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 556
        },
        "id": "dt6SywS053-O",
        "outputId": "eb58a589-33cc-4ad7-90ed-72a4cde035d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== BUSINESS TAMPERED =====\n",
            "Issues: [(21, 'HASH_MISMATCH')]\n",
            "Last valid index: 19 | kept rows: 20 of 40\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Valid-only KPIs (on the valid prefix)\n",
        "dfv = df_tamp_valid.copy()\n",
        "dfv[\"amount\"] = pd.to_numeric(dfv[\"amount\"], errors=\"coerce\")\n",
        "dfv[\"datetime\"] = pd.to_datetime(dfv[\"ts\"], unit=\"s\", errors=\"coerce\")\n",
        "dfv[\"date\"] = dfv[\"datetime\"].dt.date\n",
        "dfv[\"hour\"] = dfv[\"datetime\"].dt.hour\n",
        "\n",
        "kpi_sender = (dfv.groupby(\"sender\", as_index=False)[\"amount\"].sum().sort_values(\"amount\", ascending=False))\n",
        "kpi_product = (dfv[dfv[\"receiver\"].astype(str).str.startswith(\"Client\")]\n",
        "               .groupby(\"product\", as_index=False)[\"amount\"].sum().sort_values(\"amount\", ascending=False))\n",
        "daily = dfv.groupby(\"date\", as_index=False)[\"amount\"].sum()\n",
        "hourly = dfv.groupby(\"hour\", as_index=False)[\"amount\"].sum()\n",
        "\n",
        "cum = dfv[[\"block_id\",\"amount\"]].copy()\n",
        "cum[\"cum_amount\"] = cum[\"amount\"].cumsum()"
      ],
      "metadata": {
        "id": "yJRvqM5i56_M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Save CSVs (required deliverables)\n",
        "kpi_sender.to_csv(\"tampered_kpi_sender_valid.csv\", index=False)\n",
        "kpi_product.to_csv(\"tampered_kpi_product_valid.csv\", index=False)\n",
        "daily.to_csv(\"tampered_daily_valid.csv\", index=False)\n",
        "hourly.to_csv(\"tampered_hourly_valid.csv\", index=False)\n",
        "cum.to_csv(\"tampered_cumulative_valid.csv\", index=False)"
      ],
      "metadata": {
        "id": "g_6SJKO659sl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visuals for valid-only KPIs\n",
        "plot_bar(kpi_sender, \"sender\", \"amount\", \"Valid-only — Total Amount by Sender\", rotate=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "MUtS8r055_5K",
        "outputId": "40398bd4-8d84-40f5-8a74-9a04caf56d60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_bar(kpi_product, \"product\", \"amount\", \"Valid-only — Total Amount to Clients by Product\", rotate=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "m2WCec6s6CDH",
        "outputId": "809b03aa-86cb-4f92-9c7b-9d5f841395bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "daily_plot = daily.copy(); daily_plot[\"date\"] = daily_plot[\"date\"].astype(str)"
      ],
      "metadata": {
        "id": "2rQeVs6N6MN0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plot_bar(daily_plot, \"date\", \"amount\", \"Valid-only — Daily Totals\", rotate=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "cT8qDlba6Q4B",
        "outputId": "a5b23151-a646-4c24-f133-b6569595b1c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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f39/SXKe7ezp6ensvaCgQGlpacrLy1Pr1q0v+mfn4eGhfv366YsvvnA5m3r+/Plq166doqKiil33xf5Mz8bPz8/578zMTP39999q166djDHasGHDOe8XHBws6eRxpQUFBcXuAajICHaARRS+JblgwQJJ0h9//KHvv/9effr0kaenp6STgeDll1/WlVdeKV9fX1WtWlXVqlXT5s2blZ6eflHf7/fff5eHh4fq1avnsvz047NycnKUnJzscsvPz3c+xtmO52rYsKFz/alq167t8nWVKlUkSYcPHz5vrf3799eqVaucj7dw4ULl5ubq3nvvPe/90tLSzqi9qLecnJzzPvaFHDt2TJIUEBDgXPbuu++qadOmqlSpkkJDQ1WtWjUtWbLkon920smZHD9+3Pn26I4dO7Ru3boLzuRCLvZnejb79+/XwIEDFRISIn9/f1WrVk0dO3aUpPP22rt3b1133XV64IEHFBYWpj59+uijjz4i5MFWCHaARbRq1UoNGjTQBx98IEn64IMPZIxxOQZt6tSpGjVqlDp06KB58+Zp6dKlWrZsma6++upS++P3448/qkaNGi63pKSkYj1WYUA9nTHmvPfr06ePvL29nXvt5s2bp9atW1/wJIGePXueUXtRbz/++GOxeiz066+/ytPT07n3bN68eRo4cKDq1aunt99+W19//bWWLVumG2+8sVg/u0aNGqlVq1aaN2+e8/F9fHx01113XVLdlyo/P1833XSTlixZotGjR+vzzz/XsmXLnCdWnK9XPz8/rVy5Ut98843uvfdebd68Wb1799ZNN93kfDEBWB3XLgAspF+/fho/frw2b96sBQsW6Morr3SefShJH3/8sWJiYvT222+73O/IkSOqWrXqRX2vOnXqqKCgQHv27HEJSDt27HDZrlmzZlq2bJnLsvDwcOdjnL69JP3222/O9SUhJCREXbt21fz589WvXz+tWrVKM2fOvOD9XnrppQvuDTyXZs2aFet+0sk9VitWrFB0dLRzj93HH3+syy+/XJ9++qnL28cTJ04s9vfp37+/Ro0apT///FMLFixQ165dnXtBi6uoP9NzvQW+ZcsW7dy5U++++67LyRKnP4fOxcPDQ506dVKnTp00Y8YMTZ06VU8//bS+++47xcbGXmw7QIVDsAMspDDYTZgwQRs3bjzjkheenp5n7N1auHChDhw4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ysrKsvzfA09PT911110aNmyYfHx85HA4NGXKFC1YsEDGGP3555967733dPvtt7u71PLDfe8C43wOHjzo/HdeXp4xxpiff/7ZXH311S7H1Gzbtq3Maysrx48fd/57y5Ytxt/f3+WYkqeeesq0bNnSJCcnu6O8MlV4PNF7771nLr/8crNmzRpjjPWPrzpy5IgZPXq0iYyMNLGxscbb29t88sknzvUrVqww4eHh5ttvv3VjlaWj8Gc+efJkEx0dbb788kuX9Xl5eWbUqFHmxhtvNNnZ2e4o0S1yc3PNww8/bNq0aWOef/555zF3c+fOdW9hpaDwOfD33387lxX+n9+/f7+56qqrzKFDh5zrfvrpp7ItsJQV9l/4N9AYY3bv3m1q1arl8v/hX//6l4mKijLbt28v8xrLI+u9xK2g/v77b23YsEE7duxQWlqaatSoIenk222Fr9AKCgqUkZGh48ePS5KefvppDRs2TEeOHHFX2SXq1BkUngFnjJExRo0bN9auXbvUvXt351sv9erV04kTJ+Tr6+vmykvGqf0X/kxPf5upb9++8vT01OzZsyVZby/V6f8PgoKCNHbsWK1cuVITJ05U/fr1df311zu3DwgIcN6sIDc394xl/fv3l8Ph0OzZs/Xtt986l3t6eqpVq1ZKSkrS0aNHy7LMUnW2GRTKz8937s0u3HP36quv6qGHHtIDDzyg33//vQwrLT2nzqCgoEChoaGSTu69K/w/n5OTo/T0dOfxpuPGjdPgwYP1119/lX3BJez050Dh30Dp5O/9jRs3qlu3bs7fj6GhofL19VVwcHBZlll+uTlYwpw826d+/fqmXr16platWqZVq1Zm9erVZ2z3/fffm+DgYJOVlWUmTJhgvLy8zNq1a91QcckrygxO3zs1bNgwc+edd5qsrKyyLLVUFKX/wletb731lqlfv775+eef3VFqqTl9Bi1btjSrVq1yrt+7d69p1aqVWb58uXPZ+PHjTbNmzSyx1/a3334zd999t1m3bp0x5uTeisKf+bZt20zTpk1NXFycefvtt40xxuTk5JgRI0aYjh07mmPHjrmt7pJ0+gzOpnAmhXvufH19TWBgoGXOli/KDIwx5tdffzWXXXaZSUlJMc8884zx8fGxxN+D8/VfuAfv9DOi//GPf5jOnTubjIyMMqmxvCPYudmff/5pateubZ588kmz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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plot_bar(hourly, \"hour\", \"amount\", \"Valid-only — Hourly Totals\", rotate=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "_y8LePhP6SMI",
        "outputId": "a95fd1fb-d00a-422f-f901-95470c683056"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plot_line(cum, \"block_id\", \"cum_amount\", \"Valid-only — Cumulative Amount by Block\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "kRyWXxA-6Tm0",
        "outputId": "bc41328b-4d7a-406f-e7f3-d9407152a705"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "full  = df_tamp.copy();  full[\"amount\"]  = pd.to_numeric(full[\"amount\"],  errors=\"coerce\")\n",
        "valid = df_tamp_valid.copy(); valid[\"amount\"] = pd.to_numeric(valid[\"amount\"], errors=\"coerce\")\n",
        "\n",
        "dist_sender  = distortion_table(full, valid, key=\"sender\")\n",
        "dist_product = distortion_table(full, valid, key=\"product\")\n",
        "\n",
        "dist_sender.to_csv(\"tampered_distortion_sender.csv\", index=False)\n",
        "dist_product.to_csv(\"tampered_distortion_product.csv\", index=False)"
      ],
      "metadata": {
        "id": "yWkmfBja6UEu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_bar(dist_sender.head(10),  \"sender\",  \"abs_delta\", \"Distortion by Sender (Top 10, |Δ|)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "Qkmm9ZdF6dRc",
        "outputId": "609871fa-0f54-45ce-d326-7fde9961677b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plot_bar(dist_product.head(10), \"product\", \"abs_delta\", \"Distortion by Product (Top 10, |Δ|)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "uv0HNnoX6e35",
        "outputId": "cd29c45e-dbde-48be-81fc-12ec7d7e14fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n===== COLD-CHAIN CLEAN =====\")\n",
        "issues_cc = validate_chain(df_cc)\n",
        "df_cc_valid, idx_cc = valid_prefix(df_cc)\n",
        "print(\"Issues:\", issues_cc if issues_cc else \"none\")\n",
        "print(\"Last valid index:\", idx_cc, \"| kept rows:\", len(df_cc_valid), \"of\", len(df_cc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "woxfvcIx6fWo",
        "outputId": "7cd1551a-0f7e-4f66-816e-26074080c222"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== COLD-CHAIN CLEAN =====\n",
            "Issues: none\n",
            "Last valid index: 29 | kept rows: 30 of 30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prepare SLA fields & label on the VALID prefix only\n",
        "df_cc_valid[\"temp_c\"]    = pd.to_numeric(df_cc_valid.get(\"temp_c\"), errors=\"coerce\")\n",
        "df_cc_valid[\"sla_min_c\"] = pd.to_numeric(df_cc_valid.get(\"sla_min_c\"), errors=\"coerce\").fillna(2.0)\n",
        "df_cc_valid[\"sla_max_c\"] = pd.to_numeric(df_cc_valid.get(\"sla_max_c\"), errors=\"coerce\").fillna(8.0)\n",
        "\n",
        "def cold_status(r):\n",
        "    if pd.isna(r[\"temp_c\"]): return \"NO_SENSOR\"\n",
        "    return \"OK\" if (r[\"sla_min_c\"] <= r[\"temp_c\"] <= r[\"sla_max_c\"]) else \"BREACH\"\n",
        "\n",
        "df_cc_valid[\"coldchain_status\"] = df_cc_valid.apply(cold_status, axis=1)"
      ],
      "metadata": {
        "id": "o8Ica17k6j5l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# KPIs\n",
        "kpi_global = (df_cc_valid[\"coldchain_status\"].value_counts(normalize=True)*100).round(2)\n",
        "kpi_role = (df_cc_valid.groupby(\"role\")[\"coldchain_status\"]\n",
        "            .apply(lambda s: (s==\"OK\").mean()*100)\n",
        "            .reset_index(name=\"%OK_by_role\")\n",
        "            .sort_values(\"%OK_by_role\")).round(2)"
      ],
      "metadata": {
        "id": "UkExdsU66ooe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "aaa09481",
        "outputId": "8abaa9ca-d9b4-44b1-96fd-e786a9377035"
      },
      "source": [
        "# % OK by Role\n",
        "plt.figure()\n",
        "plt.bar(kpi_role[\"role\"], kpi_role[\"%OK_by_role\"])\n",
        "plt.title(\"Cold-chain — % OK by Role\")\n",
        "plt.xlabel(\"Role\"); plt.ylabel(\"% OK\")\n",
        "plt.tight_layout(); plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save CSVs (required deliverables)\n",
        "kpi_global.rename(\"percent\").to_csv(\"coldchain_kpi_global.csv\")\n",
        "kpi_role.to_csv(\"coldchain_kpi_role.csv\", index=False)\n"
      ],
      "metadata": {
        "id": "slIY5LvV8E3g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "required = [\n",
        "  \"tampered_kpi_sender_valid.csv\",\n",
        "  \"tampered_kpi_product_valid.csv\",\n",
        "  \"tampered_daily_valid.csv\",\n",
        "  \"tampered_hourly_valid.csv\",\n",
        "  \"tampered_cumulative_valid.csv\",\n",
        "  \"tampered_distortion_sender.csv\",\n",
        "  \"tampered_distortion_product.csv\",\n",
        "  \"coldchain_kpi_global.csv\",\n",
        "  \"coldchain_kpi_role.csv\",\n",
        "]\n",
        "\n",
        "print(\"== Files present ==\")\n",
        "for f in required:\n",
        "    print(f\"{f:35s} -> {os.path.exists(f)}\")\n",
        "\n",
        "def head_csv(p):\n",
        "    try:\n",
        "        df = pd.read_csv(p)\n",
        "        print(f\"\\n--- {p} (head) ---\")\n",
        "        print(df.head(3).to_string(index=False))\n",
        "    except Exception as e:\n",
        "        print(f\"\\n--- {p} --- error reading:\", e)\n",
        "\n",
        "for f in required:\n",
        "    if os.path.exists(f): head_csv(f)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3m2kUnS08y16",
        "outputId": "e6e20db5-c4c8-47c8-c754-20d9eda0e66e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "== Files present ==\n",
            "tampered_kpi_sender_valid.csv       -> True\n",
            "tampered_kpi_product_valid.csv      -> True\n",
            "tampered_daily_valid.csv            -> True\n",
            "tampered_hourly_valid.csv           -> True\n",
            "tampered_cumulative_valid.csv       -> True\n",
            "tampered_distortion_sender.csv      -> True\n",
            "tampered_distortion_product.csv     -> True\n",
            "coldchain_kpi_global.csv            -> True\n",
            "coldchain_kpi_role.csv              -> True\n",
            "\n",
            "--- tampered_kpi_sender_valid.csv (head) ---\n",
            "    sender  amount\n",
            "Producer_C     194\n",
            "Producer_B     150\n",
            "Producer_A     100\n",
            "\n",
            "--- tampered_kpi_product_valid.csv (head) ---\n",
            "product  amount\n",
            " Cheese      62\n",
            " Yogurt      41\n",
            " Butter      27\n",
            "\n",
            "--- tampered_daily_valid.csv (head) ---\n",
            "      date  amount\n",
            "2025-01-02      22\n",
            "2025-01-03      25\n",
            "2025-01-07     114\n",
            "\n",
            "--- tampered_hourly_valid.csv (head) ---\n",
            " hour  amount\n",
            "    0      30\n",
            "    3      38\n",
            "    4      33\n",
            "\n",
            "--- tampered_cumulative_valid.csv (head) ---\n",
            " block_id  amount  cum_amount\n",
            "        1      18          18\n",
            "        2       8          26\n",
            "        3      30          56\n",
            "\n",
            "--- tampered_distortion_sender.csv (head) ---\n",
            "    sender  amount_ALL  amount_VALID  abs_delta  signed_delta\n",
            "Producer_C         373           194        179           179\n",
            "Producer_B         290           150        140           140\n",
            "Producer_A         175           100         75            75\n",
            "\n",
            "--- tampered_distortion_product.csv (head) ---\n",
            "product  amount_ALL  amount_VALID  abs_delta  signed_delta\n",
            "   Milk         320           177        143           143\n",
            " Cheese         186            95         91            91\n",
            " Butter         166            76         90            90\n",
            "\n",
            "--- coldchain_kpi_global.csv (head) ---\n",
            "coldchain_status  percent\n",
            "              OK    100.0\n",
            "\n",
            "--- coldchain_kpi_role.csv (head) ---\n",
            "    role  %OK_by_role\n",
            "     3PL        100.0\n",
            "Producer        100.0\n",
            "   Store        100.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jVltWJBj85mx"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}